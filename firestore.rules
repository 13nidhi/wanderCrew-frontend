rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Trips collection rules
    match /trips/{tripId} {
      // Anyone can read trips (for discovery)
      allow read: if request.auth != null;
      
      // Only trip creator can write/update trips
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy || 
         request.auth.uid in resource.data.members[].userId);
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      
      // Trip members subcollection
      match /members/{memberId} {
        allow read, write: if request.auth != null && 
          (request.auth.uid == memberId || 
           request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.createdBy);
      }
    }
    
    // Messages collection rules
    match /messages/{messageId} {
      // Only trip members can read/write messages
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.members[].userId;
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if request.auth != null;
      
      // Only authenticated users can create reviews
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.reviewerId;
      
      // Only review author can update/delete
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.reviewerId;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
